type Query {
  hello: String!
  other: Boolean!
  another: String!
  something: String
  someObj: OutputThing!
  arr: [OutputThing!]!
  thing: Thing!
  optional(thing: String): String!
  oneMore(thing: String, other: Something!): String! @deprecated(reason: "Blah")
}

type Mutation {
  hello: String!
  other: Boolean!
  another: String!
  something: String
  optional(thing: String): String!
  oneMore(thing: String, other: Something!): String!
}

interface Thing {
  id: ID!
}

type ImplementationOfThing implements Thing {
  id: ID!
  something: String!
}

type OutputThing {
  id: ID!
  other: String!
}

input Something {
  yes: Boolean
  no: String!
}
