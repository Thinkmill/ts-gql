// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:f73a615e5d6bc17322400627d43bbebf
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"75764207705babbff95ea3c6ad5fe89f\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly hello: string };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"hello\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`list with fragment works as expected 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:a94884ed9b60982ce5e976ca859f61b5
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"81bff7b570121b4117f44c9cc3e7f1ed\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_aFragment = { readonly __typename: 'Query', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly id: string }> };


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_aFragment;
  name: \\"Frag_a\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_a: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_a.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:26e66cefa705e4c8cf46ecb246b69ec4
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"d354a9967936a7ecaf71f2e8ecdc268f\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_bFragment = { readonly __typename: 'Query', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly other: string }> };


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_bFragment;
  name: \\"Frag_b\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_b: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_b.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:ecf0ac413b71229562d7281167179d8f
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"bb6a42a0bf021b80e25f89c241c8b87d\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly id: string, readonly other: string }> };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<{\\"Frag_a\\":true,\\"Frag_b\\":true}>
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"directives\\\\\\":[]},{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"directives\\\\\\":[]}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`optional and required variables 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:4e257be0fb5d1c4b823423371bbe3b48
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"92456fe3490ba43a1887c222167eec62\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{
  optional?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['String']>;
  required: SchemaTypes.Scalars['String'];
}>;


type ThingQuery = { readonly __typename: 'Query', readonly optional: string, readonly other: string };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"VariableDefinition\\\\\\",\\\\\\"variable\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"}},\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"String\\\\\\"}},\\\\\\"directives\\\\\\":[]},{\\\\\\"kind\\\\\\":\\\\\\"VariableDefinition\\\\\\",\\\\\\"variable\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"required\\\\\\"}},\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NonNullType\\\\\\",\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"String\\\\\\"}}},\\\\\\"directives\\\\\\":[]}],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"},\\\\\\"arguments\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Argument\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"thing\\\\\\"},\\\\\\"value\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"}}}],\\\\\\"directives\\\\\\":[]},{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"alias\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"},\\\\\\"arguments\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Argument\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"thing\\\\\\"},\\\\\\"value\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"required\\\\\\"}}}],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`optional variable 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:ea413bbec3bf969db1ef3c7e3fb879fc
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"6b44a23f62563691b2a48382095e2cb2\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{
  optional?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['String']>;
}>;


type ThingQuery = { readonly __typename: 'Query', readonly optional: string };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"VariableDefinition\\\\\\",\\\\\\"variable\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"}},\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"String\\\\\\"}},\\\\\\"directives\\\\\\":[]}],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"},\\\\\\"arguments\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Argument\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"thing\\\\\\"},\\\\\\"value\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"}}}],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`required variable 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:25ea356596e1d02974a5c03e22afd9e4
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"83de845a1ea554b853149b7b517aeea9\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{
  required: SchemaTypes.Scalars['String'];
}>;


type ThingQuery = { readonly __typename: 'Query', readonly optional: string };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"VariableDefinition\\\\\\",\\\\\\"variable\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"required\\\\\\"}},\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NonNullType\\\\\\",\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"String\\\\\\"}}},\\\\\\"directives\\\\\\":[]}],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"},\\\\\\"arguments\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Argument\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"thing\\\\\\"},\\\\\\"value\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"required\\\\\\"}}}],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`something 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:beb6cb745f1237b8c702fc93a25b2019
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"2ba2a2e3ca1eae8430b7bd04c3ae76b8\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_aFragment = { readonly __typename: 'OutputThing', readonly other: string };


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_aFragment;
  name: \\"Frag_a\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_a: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_a.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:639dbbefeae691cb2aaae2304ef41b16
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"1fab63cfff6497fc75978444f02c653a\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_bFragment = { readonly __typename: 'OutputThing', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly id: string }> };


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_bFragment;
  name: \\"Frag_b\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_b: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_b.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:0c74b795be8f088847ce9debe74cfb3e
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"10d2cc16f1b2b64ca2ffc7ae887c4600\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly someObj: { readonly __typename: 'OutputThing', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly other: string, readonly id: string }> } };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<{\\"Frag_a\\":true,\\"Frag_b\\":true}>
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"someObj\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"directives\\\\\\":[]}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"directives\\\\\\":[]}]}}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`with directory that ends with .ts 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:f73a615e5d6bc17322400627d43bbebf
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"75764207705babbff95ea3c6ad5fe89f\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly hello: string };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"hello\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;
