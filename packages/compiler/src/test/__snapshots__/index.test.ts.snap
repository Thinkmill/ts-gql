// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic 1`] = `
{
  "errors": [],
  "fsOperations": [
    {
      "content": "// ts-gql-integrity:997632f649b7de9f77dd86807bf02a84
/*
ts-gql-meta-begin
{
  "hash": "bf8896f7a97d11c70f4c40e769886c9a"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly hello: string };



export type type = TypedDocumentNode<{
  type: "query";
  result: ThingQuery;
  variables: {};
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<"none">
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"OperationDefinition\\",\\"operation\\":\\"query\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Thing\\"},\\"variableDefinitions\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"hello\\"},\\"arguments\\":[],\\"directives\\":[]}]}}]}")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`list with fragment works as expected 1`] = `
{
  "errors": [],
  "fsOperations": [
    {
      "content": "// ts-gql-integrity:13b0b74c1f8d6b697f98466cb54fa627
/*
ts-gql-meta-begin
{
  "hash": "f37365cb606682e37f67ccf1b557235a"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type Frag_aFragment = { readonly __typename: 'Query', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly id: string }> };



export type type = TypedDocumentNode<{
  type: "fragment";
  result: Frag_aFragment;
  name: "Frag_a";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<"none">
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Frag_a: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"FragmentDefinition\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_a\\"},\\"typeCondition\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Query\\"}},\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"arr\\"},\\"arguments\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"id\\"},\\"arguments\\":[],\\"directives\\":[]}]}}]}}]}")
",
      "filename": "__generated__/ts-gql/Frag_a.ts",
      "type": "output",
    },
    {
      "content": "// ts-gql-integrity:df098928fb170e7869a4a8cc9cfe76f4
/*
ts-gql-meta-begin
{
  "hash": "b84b1868541bafdb7b7119be30ea5bd9"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type Frag_bFragment = { readonly __typename: 'Query', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly other: string }> };



export type type = TypedDocumentNode<{
  type: "fragment";
  result: Frag_bFragment;
  name: "Frag_b";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<"none">
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Frag_b: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"FragmentDefinition\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_b\\"},\\"typeCondition\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Query\\"}},\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"arr\\"},\\"arguments\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"other\\"},\\"arguments\\":[],\\"directives\\":[]}]}}]}}]}")
",
      "filename": "__generated__/ts-gql/Frag_b.ts",
      "type": "output",
    },
    {
      "content": "// ts-gql-integrity:6d6c397a1d8006b0a738ad42fc723ee6
/*
ts-gql-meta-begin
{
  "hash": "b24eff4865db664cc1b11a1e8041e39b"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly id: string, readonly other: string }> };



export type type = TypedDocumentNode<{
  type: "query";
  result: ThingQuery;
  variables: {};
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<{"Frag_a":true,"Frag_b":true}>
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"OperationDefinition\\",\\"operation\\":\\"query\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Thing\\"},\\"variableDefinitions\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"FragmentSpread\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_a\\"},\\"directives\\":[]},{\\"kind\\":\\"FragmentSpread\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_b\\"},\\"directives\\":[]}]}},{\\"kind\\":\\"FragmentDefinition\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_a\\"},\\"typeCondition\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Query\\"}},\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"arr\\"},\\"arguments\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"id\\"},\\"arguments\\":[],\\"directives\\":[]}]}}]}},{\\"kind\\":\\"FragmentDefinition\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_b\\"},\\"typeCondition\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Query\\"}},\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"arr\\"},\\"arguments\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"other\\"},\\"arguments\\":[],\\"directives\\":[]}]}}]}}]}")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`optional and required variables 1`] = `
{
  "errors": [],
  "fsOperations": [
    {
      "content": "// ts-gql-integrity:bb052f45eedd88e8dc2ccc4f231ed08b
/*
ts-gql-meta-begin
{
  "hash": "a27ca21ba64a9fe4c974b93318b54e5f"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type ThingQueryVariables = SchemaTypes.Exact<{
  optional?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['String']>;
  required: SchemaTypes.Scalars['String'];
}>;


type ThingQuery = { readonly __typename: 'Query', readonly optional: string, readonly other: string };



export type type = TypedDocumentNode<{
  type: "query";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<"none">
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"OperationDefinition\\",\\"operation\\":\\"query\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Thing\\"},\\"variableDefinitions\\":[{\\"kind\\":\\"VariableDefinition\\",\\"variable\\":{\\"kind\\":\\"Variable\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"optional\\"}},\\"type\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"String\\"}},\\"directives\\":[]},{\\"kind\\":\\"VariableDefinition\\",\\"variable\\":{\\"kind\\":\\"Variable\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"required\\"}},\\"type\\":{\\"kind\\":\\"NonNullType\\",\\"type\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"String\\"}}},\\"directives\\":[]}],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"optional\\"},\\"arguments\\":[{\\"kind\\":\\"Argument\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"thing\\"},\\"value\\":{\\"kind\\":\\"Variable\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"optional\\"}}}],\\"directives\\":[]},{\\"kind\\":\\"Field\\",\\"alias\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"other\\"},\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"optional\\"},\\"arguments\\":[{\\"kind\\":\\"Argument\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"thing\\"},\\"value\\":{\\"kind\\":\\"Variable\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"required\\"}}}],\\"directives\\":[]}]}}]}")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`optional variable 1`] = `
{
  "errors": [],
  "fsOperations": [
    {
      "content": "// ts-gql-integrity:c1cc141959f3247c79537745cca1daee
/*
ts-gql-meta-begin
{
  "hash": "818b90303250f45865e4b45c31227566"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type ThingQueryVariables = SchemaTypes.Exact<{
  optional?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['String']>;
}>;


type ThingQuery = { readonly __typename: 'Query', readonly optional: string };



export type type = TypedDocumentNode<{
  type: "query";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<"none">
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"OperationDefinition\\",\\"operation\\":\\"query\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Thing\\"},\\"variableDefinitions\\":[{\\"kind\\":\\"VariableDefinition\\",\\"variable\\":{\\"kind\\":\\"Variable\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"optional\\"}},\\"type\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"String\\"}},\\"directives\\":[]}],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"optional\\"},\\"arguments\\":[{\\"kind\\":\\"Argument\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"thing\\"},\\"value\\":{\\"kind\\":\\"Variable\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"optional\\"}}}],\\"directives\\":[]}]}}]}")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`required variable 1`] = `
{
  "errors": [],
  "fsOperations": [
    {
      "content": "// ts-gql-integrity:7b6766cb31b723113da875033dcd5656
/*
ts-gql-meta-begin
{
  "hash": "f4c9c7ad59a116d1fbce250d007e6f0f"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type ThingQueryVariables = SchemaTypes.Exact<{
  required: SchemaTypes.Scalars['String'];
}>;


type ThingQuery = { readonly __typename: 'Query', readonly optional: string };



export type type = TypedDocumentNode<{
  type: "query";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<"none">
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"OperationDefinition\\",\\"operation\\":\\"query\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Thing\\"},\\"variableDefinitions\\":[{\\"kind\\":\\"VariableDefinition\\",\\"variable\\":{\\"kind\\":\\"Variable\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"required\\"}},\\"type\\":{\\"kind\\":\\"NonNullType\\",\\"type\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"String\\"}}},\\"directives\\":[]}],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"optional\\"},\\"arguments\\":[{\\"kind\\":\\"Argument\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"thing\\"},\\"value\\":{\\"kind\\":\\"Variable\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"required\\"}}}],\\"directives\\":[]}]}}]}")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`something 1`] = `
{
  "errors": [],
  "fsOperations": [
    {
      "content": "// ts-gql-integrity:524c868e53a9925ae9e8519af94df806
/*
ts-gql-meta-begin
{
  "hash": "61fd5c447c9166b6e698683b2cd523a9"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type Frag_aFragment = { readonly __typename: 'OutputThing', readonly other: string };



export type type = TypedDocumentNode<{
  type: "fragment";
  result: Frag_aFragment;
  name: "Frag_a";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<"none">
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Frag_a: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"FragmentDefinition\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_a\\"},\\"typeCondition\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"OutputThing\\"}},\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"other\\"},\\"arguments\\":[],\\"directives\\":[]}]}}]}")
",
      "filename": "__generated__/ts-gql/Frag_a.ts",
      "type": "output",
    },
    {
      "content": "// ts-gql-integrity:49df1a1bd6a863494375f79ba5d34041
/*
ts-gql-meta-begin
{
  "hash": "76540d583ba229404eaa15ca5cdeb443"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type Frag_bFragment = { readonly __typename: 'OutputThing', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly id: string }> };



export type type = TypedDocumentNode<{
  type: "fragment";
  result: Frag_bFragment;
  name: "Frag_b";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<"none">
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Frag_b: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"FragmentDefinition\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_b\\"},\\"typeCondition\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"OutputThing\\"}},\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"arr\\"},\\"arguments\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"id\\"},\\"arguments\\":[],\\"directives\\":[]}]}}]}}]}")
",
      "filename": "__generated__/ts-gql/Frag_b.ts",
      "type": "output",
    },
    {
      "content": "// ts-gql-integrity:70e3346a90236cc2660ae4ff5e77dec2
/*
ts-gql-meta-begin
{
  "hash": "27b9b4e968f73e9f7f8bb5b1b3e800b0"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly json: MyGloballyDefinedJSONType | null, readonly someObj: { readonly __typename: 'OutputThing', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly other: string, readonly id: string }> } };



export type type = TypedDocumentNode<{
  type: "query";
  result: ThingQuery;
  variables: {};
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<{"Frag_a":true,"Frag_b":true}>
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"OperationDefinition\\",\\"operation\\":\\"query\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Thing\\"},\\"variableDefinitions\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"json\\"},\\"arguments\\":[],\\"directives\\":[]},{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"someObj\\"},\\"arguments\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"arr\\"},\\"arguments\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"FragmentSpread\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_a\\"},\\"directives\\":[]}]}},{\\"kind\\":\\"FragmentSpread\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_b\\"},\\"directives\\":[]}]}}]}},{\\"kind\\":\\"FragmentDefinition\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_a\\"},\\"typeCondition\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"OutputThing\\"}},\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"other\\"},\\"arguments\\":[],\\"directives\\":[]}]}},{\\"kind\\":\\"FragmentDefinition\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Frag_b\\"},\\"typeCondition\\":{\\"kind\\":\\"NamedType\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"OutputThing\\"}},\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"arr\\"},\\"arguments\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"id\\"},\\"arguments\\":[],\\"directives\\":[]}]}}]}}]}")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`with directory that ends with .ts 1`] = `
{
  "errors": [],
  "fsOperations": [
    {
      "content": "// ts-gql-integrity:997632f649b7de9f77dd86807bf02a84
/*
ts-gql-meta-begin
{
  "hash": "bf8896f7a97d11c70f4c40e769886c9a"
}
ts-gql-meta-end
*/

import * as SchemaTypes from "./@schema";
import { TypedDocumentNode } from "@ts-gql/tag";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly hello: string };



export type type = TypedDocumentNode<{
  type: "query";
  result: ThingQuery;
  variables: {};
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<"none">
}>

declare module "./@schema" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse("{\\"kind\\":\\"Document\\",\\"definitions\\":[{\\"kind\\":\\"OperationDefinition\\",\\"operation\\":\\"query\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"Thing\\"},\\"variableDefinitions\\":[],\\"directives\\":[],\\"selectionSet\\":{\\"kind\\":\\"SelectionSet\\",\\"selections\\":[{\\"kind\\":\\"Field\\",\\"name\\":{\\"kind\\":\\"Name\\",\\"value\\":\\"hello\\"},\\"arguments\\":[],\\"directives\\":[]}]}}]}")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;
