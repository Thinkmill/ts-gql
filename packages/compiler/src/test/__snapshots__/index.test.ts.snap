// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:fe78c67664e038d971c88cc094e9a3fd
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"ed812131898601ba06f7be4f59a44fe5\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = {};


type ThingQuery = (
  { readonly __typename: 'Query' }
  & Pick<SchemaTypes.Query, 'hello'>
);


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"hello\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`list with fragment works as expected 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:02cd0b88cc65a27b7829b0ba31ab83af
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"ac4e3776a32bc060738e894c69ca7478\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = {};


type ThingQuery = (
  { readonly __typename: 'Query' }
  & { readonly arr: ReadonlyArray<(
    { readonly __typename: 'OutputThing' }
    & Pick<SchemaTypes.OutputThing, 'id' | 'other'>
  )> }
);


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<{\\"Frag_a\\":true,\\"Frag_b\\":true}>
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"directives\\\\\\":[]},{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"directives\\\\\\":[]}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:9746c8d5847310ec9e7c3c9664073438
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"6422edc9d5e521feca600e68c8e75e8b\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_aFragment = (
  { readonly __typename: 'Query' }
  & { readonly arr: ReadonlyArray<(
    { readonly __typename: 'OutputThing' }
    & Pick<SchemaTypes.OutputThing, 'id'>
  )> }
);


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_aFragment;
  name: \\"Frag_a\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_a: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_a.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:aea6e2320558318fdaa6eb7a9c66cc6b
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"0ad88a45985e9ec0f04e586c1cb90704\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_bFragment = (
  { readonly __typename: 'Query' }
  & { readonly arr: ReadonlyArray<(
    { readonly __typename: 'OutputThing' }
    & Pick<SchemaTypes.OutputThing, 'other'>
  )> }
);


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_bFragment;
  name: \\"Frag_b\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_b: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_b.ts",
      "type": "output",
    },
  ],
}
`;

exports[`something 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:1db6e35dd1422b98654942bc22865cac
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"5dc8286a0a23cefafe23a15ed9ee6b71\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_aFragment = (
  { readonly __typename: 'OutputThing' }
  & Pick<SchemaTypes.OutputThing, 'other'>
);


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_aFragment;
  name: \\"Frag_a\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_a: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_a.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:efa9295a509fd507b41932ccf8f15069
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"fde55726bf215260642a5ff0d64fc2f3\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_bFragment = (
  { readonly __typename: 'OutputThing' }
  & { readonly arr: ReadonlyArray<(
    { readonly __typename: 'OutputThing' }
    & Pick<SchemaTypes.OutputThing, 'id'>
  )> }
);


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_bFragment;
  name: \\"Frag_b\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_b: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_b.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:4bc1588bbb4fee26da9e71c1cd7b6d52
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"c2cb0eb5ad5ac044bc65649df273afc4\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = {};


type ThingQuery = (
  { readonly __typename: 'Query' }
  & { readonly someObj: (
    { readonly __typename: 'OutputThing' }
    & { readonly arr: ReadonlyArray<(
      { readonly __typename: 'OutputThing' }
      & Pick<SchemaTypes.OutputThing, 'other' | 'id'>
    )> }
  ) }
);


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<{\\"Frag_a\\":true,\\"Frag_b\\":true}>
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"someObj\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"directives\\\\\\":[]}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"directives\\\\\\":[]}]}}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`with directory that ends with .ts 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:fe78c67664e038d971c88cc094e9a3fd
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"ed812131898601ba06f7be4f59a44fe5\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = {};


type ThingQuery = (
  { readonly __typename: 'Query' }
  & Pick<SchemaTypes.Query, 'hello'>
);


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"hello\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;
