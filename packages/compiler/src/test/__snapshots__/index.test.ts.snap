// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:c7af006fe719d586834f9a670db4fdd9
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"6d5ebfaa6570bd748ed9d409eb51945c\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly hello: string };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: {};
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"hello\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`list with fragment works as expected 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:2b772e7696e52d4ca46864190058f936
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"a0e9d31d93d0d8fc6001289058f4045e\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_aFragment = { readonly __typename: 'Query', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly id: string }> };


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_aFragment;
  name: \\"Frag_a\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_a: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_a.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:a82c7727465307dfb689247f52914d55
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"f1e57390c892a5000eebca2efa7680f5\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_bFragment = { readonly __typename: 'Query', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly other: string }> };


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_bFragment;
  name: \\"Frag_b\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_b: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_b.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:1cdbbf01f35e2c70fd11dfbce98b9c47
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"e829f6da4a351ef97d87623fb97d3acc\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly id: string, readonly other: string }> };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: {};
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<{\\"Frag_a\\":true,\\"Frag_b\\":true}>
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"directives\\\\\\":[]},{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"directives\\\\\\":[]}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Query\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`optional and required variables 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:05a40d27a4f31545619df61e2857d3f1
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"3b9923f196a31060ce7c1e4560095fdd\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{
  optional?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['String']>;
  required: SchemaTypes.Scalars['String'];
}>;


type ThingQuery = { readonly __typename: 'Query', readonly optional: string, readonly other: string };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"VariableDefinition\\\\\\",\\\\\\"variable\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"}},\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"String\\\\\\"}},\\\\\\"directives\\\\\\":[]},{\\\\\\"kind\\\\\\":\\\\\\"VariableDefinition\\\\\\",\\\\\\"variable\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"required\\\\\\"}},\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NonNullType\\\\\\",\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"String\\\\\\"}}},\\\\\\"directives\\\\\\":[]}],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"},\\\\\\"arguments\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Argument\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"thing\\\\\\"},\\\\\\"value\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"}}}],\\\\\\"directives\\\\\\":[]},{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"alias\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"},\\\\\\"arguments\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Argument\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"thing\\\\\\"},\\\\\\"value\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"required\\\\\\"}}}],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`optional variable 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:bf8df281dd012b374075a1725b1f7319
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"e1f5832739c3e3fe02abc9163b209f49\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{
  optional?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['String']>;
}>;


type ThingQuery = { readonly __typename: 'Query', readonly optional: string };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"VariableDefinition\\\\\\",\\\\\\"variable\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"}},\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"String\\\\\\"}},\\\\\\"directives\\\\\\":[]}],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"},\\\\\\"arguments\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Argument\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"thing\\\\\\"},\\\\\\"value\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"}}}],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`required variable 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:89d3fd613023d24394c695405cec8630
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"2dbf63c94365ec5a2378be441282572f\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{
  required: SchemaTypes.Scalars['String'];
}>;


type ThingQuery = { readonly __typename: 'Query', readonly optional: string };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: ThingQueryVariables;
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"VariableDefinition\\\\\\",\\\\\\"variable\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"required\\\\\\"}},\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NonNullType\\\\\\",\\\\\\"type\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"String\\\\\\"}}},\\\\\\"directives\\\\\\":[]}],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"optional\\\\\\"},\\\\\\"arguments\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Argument\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"thing\\\\\\"},\\\\\\"value\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Variable\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"required\\\\\\"}}}],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`something 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:dd5543fa97cce3b78204d08a77cbe29e
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"8f70dab88a8008a56d5aa6906a9db501\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_aFragment = { readonly __typename: 'OutputThing', readonly other: string };


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_aFragment;
  name: \\"Frag_a\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_a: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_a.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:0b6bb71004925fe2b4136d64d0375667
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"83ff2c1940084e6aa8ed20d7a9d7e647\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type Frag_bFragment = { readonly __typename: 'OutputThing', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly id: string }> };


      
export type type = TypedDocumentNode<{
  type: \\"fragment\\";
  result: Frag_bFragment;
  name: \\"Frag_b\\";
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Frag_b: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Frag_b.ts",
      "type": "output",
    },
    Object {
      "content": "// ts-gql-integrity:8c41e2ddfe779a6e4aa1b3cb35abd2ca
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"f84daf1fbbbc389006b2dbe5861b02fe\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly someObj: { readonly __typename: 'OutputThing', readonly arr: ReadonlyArray<{ readonly __typename: 'OutputThing', readonly other: string, readonly id: string }> } };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: {};
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<{\\"Frag_a\\":true,\\"Frag_b\\":true}>
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"someObj\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"directives\\\\\\":[]}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentSpread\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"directives\\\\\\":[]}]}}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_a\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"other\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}},{\\\\\\"kind\\\\\\":\\\\\\"FragmentDefinition\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Frag_b\\\\\\"},\\\\\\"typeCondition\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"NamedType\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"OutputThing\\\\\\"}},\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"arr\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"id\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;

exports[`with directory that ends with .ts 1`] = `
Object {
  "errors": Array [],
  "fsOperations": Array [
    Object {
      "content": "// ts-gql-integrity:c7af006fe719d586834f9a670db4fdd9
/*
ts-gql-meta-begin
{
  \\"hash\\": \\"6d5ebfaa6570bd748ed9d409eb51945c\\"
}
ts-gql-meta-end
*/

import * as SchemaTypes from \\"./@schema\\";
import { TypedDocumentNode } from \\"@ts-gql/tag\\";

type ThingQueryVariables = SchemaTypes.Exact<{ [key: string]: never; }>;


type ThingQuery = { readonly __typename: 'Query', readonly hello: string };


      
export type type = TypedDocumentNode<{
  type: \\"query\\";
  result: ThingQuery;
  variables: {};
  documents: SchemaTypes.TSGQLDocuments;
  fragments: SchemaTypes.TSGQLRequiredFragments<\\"none\\">
}>

declare module \\"./@schema\\" {
  interface TSGQLDocuments {
    Thing: type;
  }
}

export const document = JSON.parse(\\"{\\\\\\"kind\\\\\\":\\\\\\"Document\\\\\\",\\\\\\"definitions\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"OperationDefinition\\\\\\",\\\\\\"operation\\\\\\":\\\\\\"query\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"Thing\\\\\\"},\\\\\\"variableDefinitions\\\\\\":[],\\\\\\"directives\\\\\\":[],\\\\\\"selectionSet\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"SelectionSet\\\\\\",\\\\\\"selections\\\\\\":[{\\\\\\"kind\\\\\\":\\\\\\"Field\\\\\\",\\\\\\"name\\\\\\":{\\\\\\"kind\\\\\\":\\\\\\"Name\\\\\\",\\\\\\"value\\\\\\":\\\\\\"hello\\\\\\"},\\\\\\"arguments\\\\\\":[],\\\\\\"directives\\\\\\":[]}]}}]}\\")
",
      "filename": "__generated__/ts-gql/Thing.ts",
      "type": "output",
    },
  ],
}
`;
