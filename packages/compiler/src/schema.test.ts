import { buildSchema } from "graphql";
import ts from "typescript";
import tempy from "tempy";
import path from "path";
import { printSchemaTypes } from "./schema";

const gql = ([s]: TemplateStringsArray) => buildSchema(s);

function s(string: string): string {
  const file = tempy.writeSync(string, { name: "@schema.d.ts" });
  const program = ts.createProgram({
    rootNames: [file],
    options: { strict: true, skipDefaultLibCheck: true, types: [] },
  });
  const diagnostics = ts.getPreEmitDiagnostics(program);
  const formattedDiagnostics = ts.formatDiagnostics(diagnostics, {
    getNewLine: () => "\n",
    getCanonicalFileName: (filename) => filename,
    getCurrentDirectory: () => path.dirname(file),
  });
  if (formattedDiagnostics !== "") {
    throw new Error(`input:\n${string}\n\nerror:\n${formattedDiagnostics}`);
  }
  return string;
}

test("syntax error", () => {
  let err;
  try {
    s("type a");
  } catch (e) {
    err = e;
  }

  expect(err).toMatchInlineSnapshot(`
    [Error: input:
    type a

    error:
    @schema.d.ts(1,7): error TS1005: '=' expected.
    ]
  `);
});

test("semantic error", () => {
  let err;
  try {
    s("type a = b;");
  } catch (e) {
    err = e;
  }

  expect(err).toMatchInlineSnapshot(`
    [Error: input:
    type a = b;

    error:
    @schema.d.ts(1,10): error TS2304: Cannot find name 'b'.
    ]
  `);
});

const schema = gql`
  type Query {
    thing(thing: SomeInput!): String
  }

  scalar UnknownCustomScalar
  scalar SomeCustomScalar

  input SomeInput {
    id: ID!
    nullableId: ID
    int: Int
    float: Float
    bool: Boolean
    string: String
    defaultedNullable: String = "default"
    defaultedNonNullable: String! = "default"
    listWithNullableElement: [String!]
    list: [String]
    other: OtherInput
    custom: SomeCustomScalar
    unknown: UnknownCustomScalar
  }
  input OtherInput {
    something: ID!
  }
`;
test("basic", () => {
  expect(
    s(
      printSchemaTypes({
        schema,
        readonly: false,
        scalars: {
          SomeCustomScalar: "string",
        },
      })
    )
  ).toMatchInlineSnapshot(`
    "/** @deprecated This should not be used outside of code generated by ts-gql */
    export type Maybe<T> = T | null;
    /** @deprecated This should not be used outside of code generated by ts-gql */
    export type InputMaybe<T> = Maybe<T>;
    /** @deprecated This should not be used outside of code generated by ts-gql */
    export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
    /** @deprecated This should not be used outside of code generated by ts-gql */
    export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
    /** @deprecated This should not be used outside of code generated by ts-gql */
    export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

    export type Scalars = {
      String: string;
      Int: number;
      Float: number;
      Boolean: boolean;
      ID: string;
      UnknownCustomScalar: any;
      SomeCustomScalar: string;
    };

    export type SomeInput = {
      id: Scalars['ID'];
      nullableId?: Scalars['ID'] | null;
      int?: Scalars['Int'] | null;
      float?: Scalars['Float'] | null;
      bool?: Scalars['Boolean'] | null;
      string?: Scalars['String'] | null;
      defaultedNullable?: Scalars['String'] | null;
      defaultedNonNullable?: Scalars['String'];
      listWithNullableElement?: TSGQLMaybeArray<Scalars['String']> | null;
      list?: TSGQLMaybeArray<Scalars['String'] | null> | null;
      other?: OtherInput | null;
      custom?: Scalars['SomeCustomScalar'] | null;
      unknown?: Scalars['UnknownCustomScalar'] | null;
    };

    export type OtherInput = {
      something: Scalars['ID'];
    };

    type TSGQLMaybeArray<T> = Array<T> | T

    export {};"
  `);
});

test("readonly", () => {
  expect(
    s(
      printSchemaTypes({
        schema,
        readonly: true,
        scalars: {
          SomeCustomScalar: "string",
        },
      })
    )
  ).toMatchInlineSnapshot(`
    "/** @deprecated This should not be used outside of code generated by ts-gql */
    export type Maybe<T> = T | null;
    /** @deprecated This should not be used outside of code generated by ts-gql */
    export type InputMaybe<T> = Maybe<T>;
    /** @deprecated This should not be used outside of code generated by ts-gql */
    export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
    /** @deprecated This should not be used outside of code generated by ts-gql */
    export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
    /** @deprecated This should not be used outside of code generated by ts-gql */
    export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

    export type Scalars = {
      String: string;
      Int: number;
      Float: number;
      Boolean: boolean;
      ID: string;
      UnknownCustomScalar: any;
      SomeCustomScalar: string;
    };

    export type SomeInput = {
      readonly id: Scalars['ID'];
      readonly nullableId?: Scalars['ID'] | null;
      readonly int?: Scalars['Int'] | null;
      readonly float?: Scalars['Float'] | null;
      readonly bool?: Scalars['Boolean'] | null;
      readonly string?: Scalars['String'] | null;
      readonly defaultedNullable?: Scalars['String'] | null;
      readonly defaultedNonNullable?: Scalars['String'];
      readonly listWithNullableElement?: TSGQLMaybeArray<Scalars['String']> | null;
      readonly list?: TSGQLMaybeArray<Scalars['String'] | null> | null;
      readonly other?: OtherInput | null;
      readonly custom?: Scalars['SomeCustomScalar'] | null;
      readonly unknown?: Scalars['UnknownCustomScalar'] | null;
    };

    export type OtherInput = {
      readonly something: Scalars['ID'];
    };

    type TSGQLMaybeArray<T> = ReadonlyArray<T> | T

    export {};"
  `);
});
