// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`allow-no-transform.mixed.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag/no-transform";

gql\`
  query Thing {
    something
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 7,
      "fix": {
        "range": [
          89,
          89,
        ],
        "text": "as import("../__generated__/ts-gql/Thing").type",
      },
      "line": 3,
      "message": "You must cast gql tags with the generated type",
      "messageId": "mustUseAs",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag/no-transform";

gql\`
~~~~    [You must cast gql tags with the generated type]
  query Thing {
~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
    something
~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
  }
~~~    [You must cast gql tags with the generated type]
\`;
~    [You must cast gql tags with the generated type]
",
}
`;

exports[`allow-transform.mixed.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag";

gql\`
  query Thing {
    something
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 7,
      "fix": {
        "range": [
          76,
          76,
        ],
        "text": "as import("../__generated__/ts-gql/Thing").type",
      },
      "line": 3,
      "message": "You must cast gql tags with the generated type",
      "messageId": "mustUseAs",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
~~~~    [You must cast gql tags with the generated type]
  query Thing {
~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
    something
~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
  }
~~~    [You must cast gql tags with the generated type]
\`;
~    [You must cast gql tags with the generated type]
",
}
`;

exports[`basic.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag";

gql\`
  query Thing {
    something
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 7,
      "fix": {
        "range": [
          76,
          76,
        ],
        "text": "as import("../__generated__/ts-gql/Thing").type",
      },
      "line": 3,
      "message": "You must cast gql tags with the generated type",
      "messageId": "mustUseAs",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
~~~~    [You must cast gql tags with the generated type]
  query Thing {
~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
    something
~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
  }
~~~    [You must cast gql tags with the generated type]
\`;
~    [You must cast gql tags with the generated type]
",
}
`;

exports[`disallow-interpolation-with-transform.ts 1`] = `
{
  "lintMessages": [
    {
      "column": 5,
      "endColumn": 6,
      "endLine": 11,
      "line": 11,
      "message": "Interpolations are not allowed in gql tags when using @ts-gql/tag. Set "mode" to "no-transform" or "mixed" in your ts-gql config and import @ts-gql/tag",
      "messageId": "noInterpolation",
      "nodeType": "Identifier",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

const x: any = undefined;

gql\`
  query Thing {
    something
  }
  \${
    // @ts-ignore
    x
    ~    [Interpolations are not allowed in gql tags when using @ts-gql/tag. Set "mode" to "no-transform" or "mixed" in your ts-gql config and import @ts-gql/tag]
  }
\`;
",
}
`;

exports[`disallow-no-transform.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag";

gql\`
  query Thing {
    something
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 21,
      "endColumn": 47,
      "endLine": 1,
      "fix": {
        "range": [
          20,
          46,
        ],
        "text": ""@ts-gql/tag"",
      },
      "line": 1,
      "message": "Importing "@ts-gql/tag/no-transform" is not allowed when the "mode" is set to "transform"(the default), either switch to using "@ts-gql/tag" or set the "mode" to "no-transform" or "mixed" in your ts-gql config.",
      "messageId": "mustImportMainEntrypoint",
      "nodeType": "Literal",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag/no-transform";
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~    [Importing "@ts-gql/tag/no-transform" is not allowed when the "mode" is set to "transform"(the default), either switch to using "@ts-gql/tag" or set the "mode" to "no-transform" or "mixed" in your ts-gql config.]

gql\`
  query Thing {
    something
  }
\`;
",
}
`;

exports[`disallow-transform.no-transform.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag/no-transform";

gql\`
  query Thing {
    something
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 21,
      "endColumn": 34,
      "endLine": 1,
      "fix": {
        "range": [
          20,
          33,
        ],
        "text": ""@ts-gql/tag/no-transform"",
      },
      "line": 1,
      "message": "Importing "@ts-gql/tag" is not allowed when the "mode" is set to "no-transform", either switch to using "@ts-gql/tag/no-transform" or set the "mode" to "transform" or "mixed" in your ts-gql config.",
      "messageId": "mustImportNoTransformEntrypoint",
      "nodeType": "Literal",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";
                    ~~~~~~~~~~~~~    [Importing "@ts-gql/tag" is not allowed when the "mode" is set to "no-transform", either switch to using "@ts-gql/tag/no-transform" or set the "mode" to "transform" or "mixed" in your ts-gql config.]

gql\`
  query Thing {
    something
  }
\`;
",
}
`;

exports[`incorrect-fragment-interpolate-num.no-transform.ts 1`] = `
{
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 12,
      "line": 5,
      "message": "When using @ts-gql/tag/no-runtime, all of the fragments that are used must be interpolated, 2 fragments are used but 1 fragment is interpolated",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag/no-transform";

const x: any = undefined;

gql\`
~~~~    [When using @ts-gql/tag/no-runtime, all of the fragments that are used must be interpolated, 2 fragments are used but 1 fragment is interpolated]
  query Thing {
~~~~~~~~~~~~~~~    [When using @ts-gql/tag/no-runtime, all of the fragments that are used must be interpolated, 2 fragments are used but 1 fragment is interpolated]
    something
~~~~~~~~~~~~~    [When using @ts-gql/tag/no-runtime, all of the fragments that are used must be interpolated, 2 fragments are used but 1 fragment is interpolated]
    ...Blah_x
~~~~~~~~~~~~~    [When using @ts-gql/tag/no-runtime, all of the fragments that are used must be interpolated, 2 fragments are used but 1 fragment is interpolated]
    ...Other_x
~~~~~~~~~~~~~~    [When using @ts-gql/tag/no-runtime, all of the fragments that are used must be interpolated, 2 fragments are used but 1 fragment is interpolated]
  }
~~~    [When using @ts-gql/tag/no-runtime, all of the fragments that are used must be interpolated, 2 fragments are used but 1 fragment is interpolated]
  \${x}
~~~~~~    [When using @ts-gql/tag/no-runtime, all of the fragments that are used must be interpolated, 2 fragments are used but 1 fragment is interpolated]
\` as import(// @ts-ignore
~    [When using @ts-gql/tag/no-runtime, all of the fragments that are used must be interpolated, 2 fragments are used but 1 fragment is interpolated]
"../__generated__/ts-gql/Thing").type;
",
}
`;

exports[`interface.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag";

gql\`
  query Thing {
    node {
      id
      ... on SomethingNode {
        something
      }
      ... on AnotherNode {
        another
      }
    }
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 15,
      "fix": {
        "range": [
          194,
          194,
        ],
        "text": "as import("../__generated__/ts-gql/Thing").type",
      },
      "line": 3,
      "message": "You must cast gql tags with the generated type",
      "messageId": "mustUseAs",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
~~~~    [You must cast gql tags with the generated type]
  query Thing {
~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
    node {
~~~~~~~~~~    [You must cast gql tags with the generated type]
      id
~~~~~~~~    [You must cast gql tags with the generated type]
      ... on SomethingNode {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
        something
~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
      }
~~~~~~~    [You must cast gql tags with the generated type]
      ... on AnotherNode {
~~~~~~~~~~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
        another
~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
      }
~~~~~~~    [You must cast gql tags with the generated type]
    }
~~~~~    [You must cast gql tags with the generated type]
  }
~~~    [You must cast gql tags with the generated type]
\`;
~    [You must cast gql tags with the generated type]
",
}
`;

exports[`missing-id.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag";

gql\`
  query Thing {
    someObj {
      id
      other
    }
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 9,
      "fix": {
        "range": [
          94,
          94,
        ],
        "text": "as import("../__generated__/ts-gql/Thing").type",
      },
      "line": 3,
      "message": "You must cast gql tags with the generated type",
      "messageId": "mustUseAs",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
    {
      "column": 14,
      "endColumn": 6,
      "endLine": 7,
      "fix": {
        "range": [
          70,
          70,
        ],
        "text": "
      id",
      },
      "line": 5,
      "message": "The id field on object and interface types must always be fetched if it exists so that caching works reliably",
      "messageId": "mustFetchId",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
~~~~    [You must cast gql tags with the generated type]
  query Thing {
~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
    someObj {
~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
             ~    [The id field on object and interface types must always be fetched if it exists so that caching works reliably]
      other
~~~~~~~~~~~    [You must cast gql tags with the generated type]
~~~~~~~~~~~    [The id field on object and interface types must always be fetched if it exists so that caching works reliably]
    }
~~~~~    [You must cast gql tags with the generated type]
~~~~~    [The id field on object and interface types must always be fetched if it exists so that caching works reliably]
  }
~~~    [You must cast gql tags with the generated type]
\`;
~    [You must cast gql tags with the generated type]
",
}
`;

exports[`missing-variable.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag";

gql\`
  query Thing($thing: String) {
    optional(thing: $thing)
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 7,
      "fix": {
        "range": [
          90,
          90,
        ],
        "text": "as import("../__generated__/ts-gql/Thing").type",
      },
      "line": 3,
      "message": "You must cast gql tags with the generated type",
      "messageId": "mustUseAs",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
    {
      "column": 22,
      "endColumn": 23,
      "endLine": 5,
      "fix": {
        "range": [
          54,
          54,
        ],
        "text": "($thing: String)",
      },
      "line": 5,
      "message": "Variable "$thing" is not defined by operation "Thing".",
      "nodeType": null,
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
~~~~    [You must cast gql tags with the generated type]
  query Thing {
~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
    optional(thing: $thing)
~~~~~~~~~~~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
                     ~    [Variable "$thing" is not defined by operation "Thing".]
  }
~~~    [You must cast gql tags with the generated type]
\`;
~    [You must cast gql tags with the generated type]
",
}
`;

exports[`missing-variable-with-another-variable.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag";

gql\`
  query Thing($other: String, $thing: String) {
    optional(thing: $thing)
    other: optional(thing: $other)
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 8,
      "fix": {
        "range": [
          141,
          141,
        ],
        "text": "as import("../__generated__/ts-gql/Thing").type",
      },
      "line": 3,
      "message": "You must cast gql tags with the generated type",
      "messageId": "mustUseAs",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
    {
      "column": 22,
      "endColumn": 23,
      "endLine": 5,
      "fix": {
        "range": [
          69,
          69,
        ],
        "text": ", $thing: String",
      },
      "line": 5,
      "message": "Variable "$thing" is not defined by operation "Thing".",
      "nodeType": null,
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
~~~~    [You must cast gql tags with the generated type]
  query Thing($other: String) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
    optional(thing: $thing)
~~~~~~~~~~~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
                     ~    [Variable "$thing" is not defined by operation "Thing".]
    other: optional(thing: $other)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
  }
~~~    [You must cast gql tags with the generated type]
\`;
~    [You must cast gql tags with the generated type]
",
}
`;

exports[`missing-variable-with-another-variable-with-comma-after.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag";

// prettier-ignore
gql\`
  query Thing($other: String, $thing: String,,) {
    optional(thing: $thing)
    other: optional(thing: $other)
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 9,
      "fix": {
        "range": [
          162,
          162,
        ],
        "text": "as import("../__generated__/ts-gql/Thing").type",
      },
      "line": 4,
      "message": "You must cast gql tags with the generated type",
      "messageId": "mustUseAs",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
    {
      "column": 22,
      "endColumn": 23,
      "endLine": 6,
      "fix": {
        "range": [
          88,
          88,
        ],
        "text": ", $thing: String",
      },
      "line": 6,
      "message": "Variable "$thing" is not defined by operation "Thing".",
      "nodeType": null,
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

// prettier-ignore
gql\`
~~~~    [You must cast gql tags with the generated type]
  query Thing($other: String,,) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
    optional(thing: $thing)
~~~~~~~~~~~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
                     ~    [Variable "$thing" is not defined by operation "Thing".]
    other: optional(thing: $other)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
  }
~~~    [You must cast gql tags with the generated type]
\`;
~    [You must cast gql tags with the generated type]
",
}
`;

exports[`multiple-validation-errors.ts 1`] = `
{
  "lintMessages": [
    {
      "column": 5,
      "line": 5,
      "message": "Cannot query field "a" on type "Query".",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
    {
      "column": 5,
      "line": 6,
      "message": "Cannot query field "b" on type "Query".",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
  query Thing {
    a
    ~    [Cannot query field "a" on type "Query".]
    b
~~~~~    [Cannot query field "a" on type "Query".]
    ~    [Cannot query field "b" on type "Query".]
  }
~~~    [Cannot query field "a" on type "Query".]
~~~    [Cannot query field "b" on type "Query".]
\`;
~~    [Cannot query field "a" on type "Query".]
~~    [Cannot query field "b" on type "Query".]

~    [Cannot query field "a" on type "Query".]
~    [Cannot query field "b" on type "Query".]",
}
`;

exports[`no-name.ts 1`] = `
{
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 7,
      "line": 3,
      "message": "GraphQL operations must have a name",
      "messageId": "mustBeNamed",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
~~~~    [GraphQL operations must have a name]
  query {
~~~~~~~~~    [GraphQL operations must have a name]
    something
~~~~~~~~~~~~~    [GraphQL operations must have a name]
  }
~~~    [GraphQL operations must have a name]
\`;
~    [GraphQL operations must have a name]
",
}
`;

exports[`parse-error.ts 1`] = `
{
  "lintMessages": [
    {
      "column": 3,
      "line": 4,
      "message": "Syntax Error: Unexpected Name "que".",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
  que Thing {
  ~~~~~~~~~~~    [Syntax Error: Unexpected Name "que".]
    something
~~~~~~~~~~~~~    [Syntax Error: Unexpected Name "que".]
  }
~~~    [Syntax Error: Unexpected Name "que".]
\`;
~~    [Syntax Error: Unexpected Name "que".]

~    [Syntax Error: Unexpected Name "que".]",
}
`;

exports[`union.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag";

gql\`
  query Thing {
    union {
      ... on A {
        a
      }
      ... on B {
        b
      }
    }
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 14,
      "fix": {
        "range": [
          150,
          150,
        ],
        "text": "as import("../__generated__/ts-gql/Thing").type",
      },
      "line": 3,
      "message": "You must cast gql tags with the generated type",
      "messageId": "mustUseAs",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
~~~~    [You must cast gql tags with the generated type]
  query Thing {
~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
    union {
~~~~~~~~~~~    [You must cast gql tags with the generated type]
      ... on A {
~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
        a
~~~~~~~~~    [You must cast gql tags with the generated type]
      }
~~~~~~~    [You must cast gql tags with the generated type]
      ... on B {
~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
        b
~~~~~~~~~    [You must cast gql tags with the generated type]
      }
~~~~~~~    [You must cast gql tags with the generated type]
    }
~~~~~    [You must cast gql tags with the generated type]
  }
~~~    [You must cast gql tags with the generated type]
\`;
~    [You must cast gql tags with the generated type]
",
}
`;

exports[`unknown-variable-type.ts 1`] = `
{
  "lintMessages": [
    {
      "column": 23,
      "line": 4,
      "message": "Unknown type "DoesNotExist".",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
  query Thing($thing: DoesNotExist) {
                      ~~~~~~~~~~~~~~~    [Unknown type "DoesNotExist".]
    optional(thing: $thing)
~~~~~~~~~~~~~~~~~~~~~~~~~~~    [Unknown type "DoesNotExist".]
  }
~~~    [Unknown type "DoesNotExist".]
\`;
~~    [Unknown type "DoesNotExist".]

~    [Unknown type "DoesNotExist".]",
}
`;

exports[`unused-variable.ts 1`] = `
{
  "fixedOutput": "import { gql } from "@ts-gql/tag";

gql\`
  query Thing($thing: String) {
    optional
  }
\`as import("../__generated__/ts-gql/Thing").type;
",
  "lintMessages": [
    {
      "column": 1,
      "endColumn": 2,
      "endLine": 7,
      "fix": {
        "range": [
          91,
          91,
        ],
        "text": "as import("../__generated__/ts-gql/Thing").type",
      },
      "line": 3,
      "message": "You must cast gql tags with the generated type",
      "messageId": "mustUseAs",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
~~~~    [You must cast gql tags with the generated type]
  query Thing($thing: String) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    [You must cast gql tags with the generated type]
    optional
~~~~~~~~~~~~    [You must cast gql tags with the generated type]
  }
~~~    [You must cast gql tags with the generated type]
\`;
~    [You must cast gql tags with the generated type]
",
}
`;

exports[`wrong-variable-type.ts 1`] = `
{
  "lintMessages": [
    {
      "column": 15,
      "line": 4,
      "message": "Variable "$thing" of type "ID" used in position expecting type "String".",
      "nodeType": "TaggedTemplateExpression",
      "ruleId": "ts-gql",
      "severity": 2,
    },
  ],
  "snapshot": "
import { gql } from "@ts-gql/tag";

gql\`
  query Thing($thing: ID) {
              ~~~~~~~~~~~~~    [Variable "$thing" of type "ID" used in position expecting type "String".]
    optional(thing: $thing)
~~~~~~~~~~~~~~~~~~~~~~~~~~~    [Variable "$thing" of type "ID" used in position expecting type "String".]
  }
~~~    [Variable "$thing" of type "ID" used in position expecting type "String".]
\`;
~~    [Variable "$thing" of type "ID" used in position expecting type "String".]

~    [Variable "$thing" of type "ID" used in position expecting type "String".]",
}
`;
